// Code generated by go-bindata.
// sources:
// ../templates/objc/--APIName--.h.tpl
// ../templates/objc/--APIName--.m.tpl
// ../templates/objc/--APIPrefix--ResourceManager.h.tpl
// ../templates/objc/--APIPrefix--ResourceManager.m.tpl
// ../templates/objc/--APIPrefix--SerializableModelProtocol.h.tpl
// ../templates/objc/--APIPrefix--SerializableModelUtils.h.tpl
// ../templates/objc/--APIPrefix--SerializableModelUtils.m.tpl
// ../templates/objc/--APIPrefix--ServiceProtocol.h.tpl
// ../templates/objc/--APIPrefix--URLHelper.h.tpl
// ../templates/objc/--APIPrefix--URLHelper.m.tpl
// ../templates/objc/common/preHeaderComment.tpl
// ../templates/objc/common/services.tpl
// ../templates/objc/model/--ModelName--.h.tpl
// ../templates/objc/model/--ModelName--.m.tpl
// ../templates/objc/service/--ModelName--Service.h.tpl
// ../templates/objc/service/--ModelName--Service.m.tpl
// DO NOT EDIT!

package gen

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// TemplatesObjcApinameHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApinameHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIName--.h.tpl"
	name := "../templates/objc/--APIName--.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApinameMTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApinameMTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIName--.m.tpl"
	name := "../templates/objc/--APIName--.m.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixResourcemanagerHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixResourcemanagerHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--ResourceManager.h.tpl"
	name := "../templates/objc/--APIPrefix--ResourceManager.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixResourcemanagerMTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixResourcemanagerMTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--ResourceManager.m.tpl"
	name := "../templates/objc/--APIPrefix--ResourceManager.m.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixSerializablemodelprotocolHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixSerializablemodelprotocolHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--SerializableModelProtocol.h.tpl"
	name := "../templates/objc/--APIPrefix--SerializableModelProtocol.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixSerializablemodelutilsHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixSerializablemodelutilsHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--SerializableModelUtils.h.tpl"
	name := "../templates/objc/--APIPrefix--SerializableModelUtils.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixSerializablemodelutilsMTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixSerializablemodelutilsMTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--SerializableModelUtils.m.tpl"
	name := "../templates/objc/--APIPrefix--SerializableModelUtils.m.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixServiceprotocolHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixServiceprotocolHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--ServiceProtocol.h.tpl"
	name := "../templates/objc/--APIPrefix--ServiceProtocol.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixUrlhelperHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixUrlhelperHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--URLHelper.h.tpl"
	name := "../templates/objc/--APIPrefix--URLHelper.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcApiprefixUrlhelperMTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcApiprefixUrlhelperMTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/--APIPrefix--URLHelper.m.tpl"
	name := "../templates/objc/--APIPrefix--URLHelper.m.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcCommonPreheadercommentTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcCommonPreheadercommentTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/common/preHeaderComment.tpl"
	name := "../templates/objc/common/preHeaderComment.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcCommonServicesTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcCommonServicesTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/common/services.tpl"
	name := "../templates/objc/common/services.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcModelModelnameHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcModelModelnameHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/model/--ModelName--.h.tpl"
	name := "../templates/objc/model/--ModelName--.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcModelModelnameMTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcModelModelnameMTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/model/--ModelName--.m.tpl"
	name := "../templates/objc/model/--ModelName--.m.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcServiceModelnameServiceHTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcServiceModelnameServiceHTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/service/--ModelName--Service.h.tpl"
	name := "../templates/objc/service/--ModelName--Service.h.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// TemplatesObjcServiceModelnameServiceMTpl reads file data from disk. It returns an error on failure.
func TemplatesObjcServiceModelnameServiceMTpl() (*asset, error) {
	path := "/Users/alvaro/Projects/go/src/github.com/alvaroloes/sdkgen/templates/objc/service/--ModelName--Service.m.tpl"
	name := "../templates/objc/service/--ModelName--Service.m.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../templates/objc/--APIName--.h.tpl":                            TemplatesObjcApinameHTpl,
	"../templates/objc/--APIName--.m.tpl":                            TemplatesObjcApinameMTpl,
	"../templates/objc/--APIPrefix--ResourceManager.h.tpl":           TemplatesObjcApiprefixResourcemanagerHTpl,
	"../templates/objc/--APIPrefix--ResourceManager.m.tpl":           TemplatesObjcApiprefixResourcemanagerMTpl,
	"../templates/objc/--APIPrefix--SerializableModelProtocol.h.tpl": TemplatesObjcApiprefixSerializablemodelprotocolHTpl,
	"../templates/objc/--APIPrefix--SerializableModelUtils.h.tpl":    TemplatesObjcApiprefixSerializablemodelutilsHTpl,
	"../templates/objc/--APIPrefix--SerializableModelUtils.m.tpl":    TemplatesObjcApiprefixSerializablemodelutilsMTpl,
	"../templates/objc/--APIPrefix--ServiceProtocol.h.tpl":           TemplatesObjcApiprefixServiceprotocolHTpl,
	"../templates/objc/--APIPrefix--URLHelper.h.tpl":                 TemplatesObjcApiprefixUrlhelperHTpl,
	"../templates/objc/--APIPrefix--URLHelper.m.tpl":                 TemplatesObjcApiprefixUrlhelperMTpl,
	"../templates/objc/common/preHeaderComment.tpl":                  TemplatesObjcCommonPreheadercommentTpl,
	"../templates/objc/common/services.tpl":                          TemplatesObjcCommonServicesTpl,
	"../templates/objc/model/--ModelName--.h.tpl":                    TemplatesObjcModelModelnameHTpl,
	"../templates/objc/model/--ModelName--.m.tpl":                    TemplatesObjcModelModelnameMTpl,
	"../templates/objc/service/--ModelName--Service.h.tpl":           TemplatesObjcServiceModelnameServiceHTpl,
	"../templates/objc/service/--ModelName--Service.m.tpl":           TemplatesObjcServiceModelnameServiceMTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"objc": &bintree{nil, map[string]*bintree{
				"--APIName--.h.tpl":                            &bintree{TemplatesObjcApinameHTpl, map[string]*bintree{}},
				"--APIName--.m.tpl":                            &bintree{TemplatesObjcApinameMTpl, map[string]*bintree{}},
				"--APIPrefix--ResourceManager.h.tpl":           &bintree{TemplatesObjcApiprefixResourcemanagerHTpl, map[string]*bintree{}},
				"--APIPrefix--ResourceManager.m.tpl":           &bintree{TemplatesObjcApiprefixResourcemanagerMTpl, map[string]*bintree{}},
				"--APIPrefix--SerializableModelProtocol.h.tpl": &bintree{TemplatesObjcApiprefixSerializablemodelprotocolHTpl, map[string]*bintree{}},
				"--APIPrefix--SerializableModelUtils.h.tpl":    &bintree{TemplatesObjcApiprefixSerializablemodelutilsHTpl, map[string]*bintree{}},
				"--APIPrefix--SerializableModelUtils.m.tpl":    &bintree{TemplatesObjcApiprefixSerializablemodelutilsMTpl, map[string]*bintree{}},
				"--APIPrefix--ServiceProtocol.h.tpl":           &bintree{TemplatesObjcApiprefixServiceprotocolHTpl, map[string]*bintree{}},
				"--APIPrefix--URLHelper.h.tpl":                 &bintree{TemplatesObjcApiprefixUrlhelperHTpl, map[string]*bintree{}},
				"--APIPrefix--URLHelper.m.tpl":                 &bintree{TemplatesObjcApiprefixUrlhelperMTpl, map[string]*bintree{}},
				"common": &bintree{nil, map[string]*bintree{
					"preHeaderComment.tpl": &bintree{TemplatesObjcCommonPreheadercommentTpl, map[string]*bintree{}},
					"services.tpl":         &bintree{TemplatesObjcCommonServicesTpl, map[string]*bintree{}},
				}},
				"model": &bintree{nil, map[string]*bintree{
					"--ModelName--.h.tpl": &bintree{TemplatesObjcModelModelnameHTpl, map[string]*bintree{}},
					"--ModelName--.m.tpl": &bintree{TemplatesObjcModelModelnameMTpl, map[string]*bintree{}},
				}},
				"service": &bintree{nil, map[string]*bintree{
					"--ModelName--Service.h.tpl": &bintree{TemplatesObjcServiceModelnameServiceHTpl, map[string]*bintree{}},
					"--ModelName--Service.m.tpl": &bintree{TemplatesObjcServiceModelnameServiceMTpl, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
